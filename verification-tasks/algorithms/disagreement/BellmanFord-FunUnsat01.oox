class Main {

  static int INFINITY() {return 2147483647;}

  static int[] runBellmanFord(int N, int[] D, int src) {

    // Initialize distances.
    int[] dist := new int[N];
    bool[] infinite := new bool[N];

    int b := 0;
    while (b < N){
        dist[b] := Main.INFINITY();
        infinite[b] := true;
        b := b + 1;
    }
    dist[src] := 0;
    infinite[src] := false;

    // Keep relaxing edges until either:
    //  (1) No more edges need to be updated.
    //  (2) We have passed through the edges N times.
    int k := 0;
    while (k < N){
        bool relaxed := false;
        int i := 0;
        while (i < N){
            int j := 0;
            while (j < N){
                if (i != j) {
                    bool infinitei := infinite[i];
                    if (!infinitei) { // V^2(V-1) branches
                        int distj := dist[j];
                        int disti := dist[i];
                        int DiNj := D[i * N + j];
                        if (distj > disti + DiNj) { // V^2(V-1) branches
                        dist[j] := disti + DiNj;
                        infinite[j] := false;
                        relaxed := true;
                        };
                    };
                }; // V^3 branches
                j := j + 1;
            }
            i := i + 1;
        }
        if(!relaxed) k := N;; // V branches
        k := k + 1;
    }

    // Check for negative-weight egdes.
    if (k == N) { // 1 branch
      // We relaxed during the N-th iteration, so there must be
      // a negative-weight cycle.
    };

    // Return the computed distances.
    return dist;
  }

  static void main(int tmp) {
    // assume V > 0 && V < 1000000; 

    int V := 100;
    int[] D := new int[V];

    int i := 0;
    while(i < V){
        int j := 0;
        while (j < V){
            if (i != j){ 
            assume tmp >= 0 && tmp < V;
            D[i * V + j] := tmp;
            };
            j := j + 1;
        }
        i := i + 1;
    }
    int[] dist := Main.runBellmanFord(V, D, 0);
    int b := 0;
    while (b < #dist){
      // either there is no path to d from the source,
      // or it goes through at most V nodes
      int d := dist[b];
      assert (d > V);
      b := b + 1;
    }
  }
}